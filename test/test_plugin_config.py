"""
    Ory Kratos API

    Documentation for all public and administrative Ory Kratos APIs. Public and administrative APIs are exposed on different ports. Public APIs can face the public internet without any protection while administrative APIs should never be exposed without prior authorization. To protect the administative API port you should use something like Nginx, Ory Oathkeeper, or any other technology capable of authorizing incoming requests.   # noqa: E501

    The version of the OpenAPI document: v0.0.0-alpha.38
    Contact: hi@ory.sh
    Generated by: https://openapi-generator.tech
"""


import sys
import unittest

import ory_kratos_client
from ory_kratos_client.model.plugin_config_args import PluginConfigArgs
from ory_kratos_client.model.plugin_config_interface import PluginConfigInterface
from ory_kratos_client.model.plugin_config_linux import PluginConfigLinux
from ory_kratos_client.model.plugin_config_network import PluginConfigNetwork
from ory_kratos_client.model.plugin_config_rootfs import PluginConfigRootfs
from ory_kratos_client.model.plugin_config_user import PluginConfigUser
from ory_kratos_client.model.plugin_env import PluginEnv
from ory_kratos_client.model.plugin_mount import PluginMount
globals()['PluginConfigArgs'] = PluginConfigArgs
globals()['PluginConfigInterface'] = PluginConfigInterface
globals()['PluginConfigLinux'] = PluginConfigLinux
globals()['PluginConfigNetwork'] = PluginConfigNetwork
globals()['PluginConfigRootfs'] = PluginConfigRootfs
globals()['PluginConfigUser'] = PluginConfigUser
globals()['PluginEnv'] = PluginEnv
globals()['PluginMount'] = PluginMount
from ory_kratos_client.model.plugin_config import PluginConfig


class TestPluginConfig(unittest.TestCase):
    """PluginConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testPluginConfig(self):
        """Test PluginConfig"""
        # FIXME: construct object with mandatory attributes with example values
        # model = PluginConfig()  # noqa: E501
        pass


if __name__ == '__main__':
    unittest.main()
